*용어의 개념

1. 상대적, 절대적
2. 개념적, 물리적
3. 추상적, 구체적

    3-1. 추상적 - 구체적이지 못한 표현
    3-2. 구체적 - 모든것을 정확하게 표현

*용어를 바라보는 관점

소비자 관점 VS 생산자 관점

*올바른 기초 학습 방법
1. 문법(Syntax)과 의미(Semantics) 구분
2. 언어의 특성
3. 플랫폼의 특성

호이스팅/
자바스크립트의 특성/
플랫폼/(내코드가 어디서 사용이되는가? 에서 어디에 해당되는 곳이 플랫폼이다.)

*기초학습의 방해되는 요소
1. 착각
2. 사고방식
3. 감정

*기본에 충실하자.
1. 기본 - 근간이 되는 지식
    1-1. html,css가 기본이 아니다.

*자바스크립트 기초

1. 값 : value - 식으로 인해 얻어지는 결과(피연산자도 값)
    1-1. 종류 - 숫자(number),문자(string),불린(true,false),함수(function),변수(value),객체(object),symbol(es6)


2. 식 : expression - 값을 얻기 위한 피연산자(항)(<-값)와 연산자(+,-,*,>,<,=)를 포함한 문장
    2-1. 산술연산자(+,-,*,%,/)
    2-2. 비교연산자(>,>=,=,=<,<,==,===,!=,!==)
    2-3. 등등
    2-ps.
        단항연산자(++a,a++,typeof) - 피연산자를 하나만 받아도 되는 연산자
        이항연산자(2 + 1) - 피연산자를 두개를 받아야 하는 연산자
        삼항연산자((비교연산<-이것도 항)? 항 : 항) -피연산자를 3개를 받아야 하는 연산자

3. 문 : statement -

*변수
1. 값에 이름표를 달아주기위해 선언하는 예약어+이름
2. 값의 상태(의미)를 할당하기위해 선언 - 그러므로 이름을 의미있게 짓는거이 중요하다.

*단항연산자
- 피연산자를 하나만 받아도되는 연산자
- typeof에 typeof() 이런식으로 표현하는것은 그냥 피연산자 우선순위를 위한 괄호를 넣는것과 같다.

*프론트엔드적 개념
- 사전 과제를 하면서 alert, prompt등을 사용한것들은 html,css를 먼저 배우는 플렛폼(브라우저)의 상태에서 학습한 결과.(플렛폼이 바뀌면 망테크)

*함수
1. 선언부, 실행(호출)부
    1-1. 선언부
    function 이라는 예약어를 만나면 함수를 만든다.
    함수 표현문 - function 이름(){}
        -> 함수 및 변수의 이름은 식별자 라고 부름
    함수 표현식 - 변수 = function(){}

    선언부에서 값을 넘기고싶다. => 매개변수(paramter) / ex:이름(파라미터){}
        -> 파라미터 => 넘기는 값(변수)

    1-2. 호출부
    호출부에서 값을 넘기고싶다. => 인자(arguments) / ex:이름(인자)
        -> 인자 => 값이 나오면 또는 값을 가지고 있으면 된다. 그러므로 식도 값(인자)로 넘길 수 있다.
        -> 함수를 호출한 식 == 값이다. 함수도 값이 귀결되므로 인자로 사용할 수 있다.//질문 : 함수도 값이다. 그러므로 인자로 사용이 가능하다.


**함수 매개변수(parameter)는 함수 선언 안에 나열된 이름들(names)입니다.
**함수 인자(arguments)​는 함수에서 넘겨 받은 실제 값(values) 입니다.
**if문 for문등의 강박관념을 버려라!! 실무에서 코드를 잘 작성한다면, 사용할 일이 그렇게 많지 않다.
**개발자로써 식이 변함으로써 값이 변하게 조작해야 한다. 값으로 인해 식이 변하면 안된다.





