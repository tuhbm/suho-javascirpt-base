# 함수의 사용 이유
1. 재사용이 가능하게
2. 사용하기 쉽게
3. 남이 사용하기 쉽게(바깥에서 내가 만든 함수를 사용하기 쉽게)

# 인터페이스
동작을 할 수 있게 만드는 접속기 같은 역할
인터페이스(영어: interface, 문화어: 대면부, 결합부) 또는 접속기는 사물 간 또는 사물과 인간 간의 의사소통이 가능하도록 일시적 혹은 영속적인 접근을 목적으로 만들어진 물리적, 가상적 매개체를 의미한다.
인터페이스는 프로그램, 라이브러리 등의 추상적 모형으로 API나 시스템 호출과 같이 함수나 입출력으로 나타난다.

# API
API(Application Programming Interface, 응용 프로그램 프로그래밍 인터페이스)는 응용 프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻한다.
컴퓨터 코드가 사용할 인터페이스

# 캡슐화
바깥에서 접근하지 못하게 기능(동작)을 숨겨 놓은 것

# 배열
조건문은 조건식 비교후 동작
이후 또 조건식을 비교 이후 또 동작
이런식으로 조건식에 값에 false가 나올때까지 반복하며 동작한다.

# 개발자의 관점
개발자란 우리는 함수를 사용자가 아니라 설계하는 직업,
그러나 jQuery 사용자의 관점에서는 함수를 설계하는 작업이 아니라, 사용하는 작업을 지속한다.

# 변수의 선언시점
굳이 전역으로 사용할 함수가 아니라면
실행시점에 근접하게 선언하는것이, 소스를 읽는 가독성 부문에서 더 좋다.
그리고 ES6에 들어가면, 고민하지않아도 된다.

# 공부시점
원하는것을 만들려면 그 플랫폼을 공부해야하고,
그리고 그플랫폼의 구성언어를 공부하고,
그 구성언어의 특성을 공부해야한다.

# 함수를 만들때 순서
1. 원하는 결과 결과값을 먼저 넣어보고, 문을 선택, 식을 넣고 값을 배출
2. 원하는 결과값이 변할 수 있으니, 결과값을 변수화 한다.
3. 때에 따라 매개변수로 추가한다.

# 기능을 구현했을때 확인방법
실행을 한다.
실행해서 테스트를 한다.

# TDD
Test-driven development